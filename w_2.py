import numpy as np
import copy

def suffix_array(text):
	suffixes = []
	indices = []	
	for i in range(len(text)):
		suffixes.append(text[i:])
		indices.append(i)
	indices = [x for _, x in sorted(zip(suffixes,indices), key=lambda pair: pair[0])]
	return indices

def burrows_wheeler_transform(text):
	text = list(text)
	M = []
	for i in range(len(text)):
		x = copy.deepcopy(text)
		y = x[-i: ]
		del x[-i: ]
		x = y + x
		M.append(''.join(x))
	M.sort()
	bw = ''
	for string in M:
		bw += string[-1]
	return bw

def inverse_burrows_wheeler_transform(bw):
	last_column = list(bw)
	labels = {}
	lc = []
	for i in range(len(bw)):
		lc.append((last_column[i], i))
	
	fc = copy.deepcopy(lc)
	fc.sort()
	for i in range(len(lc)):
		lc[i] = lc[i][0] + str(lc[i][1])

	for i in range(len(fc)):
		fc[i] = fc[i][0] + str(fc[i][1])

	mat = []
	for i in range(len(bw)):
		mat.append([fc[i], lc[i]])

	i = 0
	l = []
	text = ''

	while len(l) != len(bw):
		find = fc[i]
		index_find_lc = lc.index(find)
		symbol = fc[index_find_lc]
		l.append(symbol)
		i = fc.index(symbol)

	for j in l:
		text += j[0]
	return text
		

bw = 'TCCTTCCTGACCGCCTCCGGGATTGAATTCGAGGCTCGTCAGAGCGGCTGCACATAGTTACCCTGATGCTGGCGACAATGAAGATTCATCAAATCGGTAGGCACCGAAGGGACACCAGCGGCACCACCGTCCTTGCCGCGATTGTTCTGTATCGTACCAACTCCATAAAAAAAGATAACCTATAAAGGGAAATTAACGGAAAACGCCATATCTTGATAGACAGGGCGGCCGTATTAATGACAAGCAACACCCTTCCGTCTATCTGCGGGCGGACAGCGGTGCCCTGGCGCCGGTGTTATTCTTTTGAATTGTAGATTCGGTTAACGAATCTGACGGGTGCATAGTGCTTACAGCTGGCGTCCCCTCCTTCTCTTGATTTTGTGTTTCAAGTCTAATGGTAAATCGCGTGAGGTGAAATCCCGCATCTTTTGCCTGTTCGGCCGCTCTTATCCTTCAAGTTTGACAGGCGTTATGTTAAATCGCACCCCGTACATGATAATGAGTCTGGGGCTAGGCGCAGCTGTTGTGGAACAAGCCAAAGCCCGAGTTTGTTCGAATTCCCCAATAGAAGTCTAGGGAGACTGCCGTGCAGCAATTTGTAACTACAGGGAGATGTATGCATTGCTACTGAGATCGTGACCACTCAAGCCACTCCGCTGTGCAGATTTATCCGGGACTCTGTAGGAAACGCTAAGTATAGCAACTTGATTCATATCTCTCTCTGAACGCTTCCTTGATCACGGGCTCTTATGTATTGTCGTGCCC$CTTATAAAGTAACATGAGCGCTGTTTCCCACTTAGCTTTCGCATGTGAGCCTTGGCTGTTTTACGCGAAGAATAAGCACGGCGTGGTAGGGCACGGTATGGCTAGCCACACTGGAACTAACTGTTTTTATTGAAGGATGCACACTATGTTAGAAAGCTGACATCTAGAACTGCTCTCGGACGGACATCGCGTACAAATCCCGTCTAAATAACGAAA'
print(inverse_burrows_wheeler_transform(bw))

'''
text = 'GTGCGAGAAGGTGCCCCCGGACACGTTTCATTTCGTCCCCAGTAGTAAGCCGAAGGGCAAGAATCGGCCTCCATTAGCAATTATGCCCTGCTCGCGGTGGCGAAGGTCCCGGTGTTGCGAGGGAAGGTGGACTGGCGTGCGGATTGCGGAGGTGGACCACAATGAAAGTAATGTACGTGTTTATCCTCACTAGGACATGTTTGGTCTACCGGCGATCGGAGTGGTAGGGAACTATTCAGATGCTCGGGGACAAACAGGAACCTGTGTATCGCTGGGTCCTCTATAACCGGTGGCAGGGTCTGACCTACCAATTCTATATCTCAACAGCTACCCGTATCAACAGAAGCAGGCTGTACGCTAATTTTAATGTGAGCGACAGTTACAGCACGTAGGTAGAGTCAGAAACTCGCGTTCGGCAGCTACATAGCCAATACCTCACTTTCTTGACAGCGAACTTGTCTGGCTGGCGAGCCATGGATAGGTGTGGTCGATAATTGGCGCTTCCGTTAATTGGGTAAGACGTTGGAATTTAGAGAACGTAGAGTGGTTAGCCTAGCCAACTTGCTCAACGCGGGGGCATCAGTGCTCCCGGTCCGCCGTTCGGCGCACCCATGCGGGATTTGTCCACTTAAGTAGAACACTGGCCCCCAACGCCAGCGGATTCATGGCTACACCCACTGTACAGCCATCTGTCAACCATGGGAAGGTCCTATCAACCGTATCGCTAATCTCGCGGTCTGAATGCCCGCGTCCCCATAGTAGTTTAGCGATAGACGTTCAAGATCCGACATGATCGTTTAAATATCACCGTGATAGAGTTCACTTGGGGGACAAATACGGCATAGCCATAGTGCGGCGGGTTGATTTGCTGTCAACGCAAC$'
print(burrows_wheeler_transform(text))
'''
'''
text = 'CGGCGTCTCGGGAGATGAGTTAGTGGCAGACTCGAGGGAAAGAGTGCGCGTCATCATGACTACTCTGATTAAGGCAAAAATATTCGAGTACTACAACCAAAAATCCGACAGCTGTGATGCGAGGCATGGGCTTTGTGGTTTGATGATCAGGTGCTCTCACTAGGACGGCATATAAGGAATTTATCTTGTTCCGTACTCATCCAAGCGGCATACGCGCTACAAGGCGAAGTCGCCCGTCCTATTTAATTCCCACTACCTTATGCTTCGTATCCAGCAGCGCGACGTCATAATCTATGTTCGACGCAGGGATCGGTGTGCGTAGCATTAATAAAGACATCTGTGCGGGGAACAGTGACTGTTGACACATCCCGAACAGGTGGCCCCTAGTCACCATTGGCCACGTTCGTTTAAGGAGGTGCCGTACTTGTCCCCATGCGATAAGGATACCGCGTGATCGGGTATCACTGGCACGCGTTACACTAGTGTCACGCTAGTGACCCCTCTGTGGAAGCACGCCTCGAGGGTCCCGTACAAATCAACGAAGAGATCTCATGTCGGGACGAGTAAATAAAGTCTGTCAAGCTTTACTCCGGATGATGACGCATGAGCGAACCAAAGGTAAGTCGGTCCCCACCGACACGAAGTAGTACCAGTGCGAGTTACAAAACTTGTCTCGCTTTGGTTGGTTGGAGGGGTGGATGCCTGACAAGCCGTGCATACACTGTCAGCCGTGGCGTGGTCAAGTCCGTGCTCCAGGCCTAGCCACAGAGCAGGTGCTTCGGTTACCTGGTTCGAACAATAACCGAGCTGACGTGCATTAAAATAGTTATATCGGATCCCAGATGAGCGGTGGGAAGACGGGGAATAGTGTTGCCACCGACCGCCGCGCACCGAAGAGGAATCTTGCGCTGGGAAACATTGTTTCACAGAAGTTTAAGACCAA$'
print(suffix_array(text))
'''